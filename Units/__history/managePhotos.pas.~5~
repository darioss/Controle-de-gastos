unit managePhotos;

interface

uses
  System.SysUtils, System.Types, System.UITypes, System.Classes, System.Variants,
  FMX.Types, FMX.Controls, FMX.Forms, FMX.Graphics, FMX.Dialogs, FMX.Objects,
  FMX.Controls.Presentation, FMX.StdCtrls, FMX.Layouts,
  FMX.MediaLibrary.Actions, System.Actions, FMX.ActnList, FMX.StdActns, System.Permissions;

type
  TForm1 = class(TForm)
    Layout12: TLayout;
    Label4: TLabel;
    img_fotos: TImage;
    img_library: TImage;
    Layout1: TLayout;
    Circle1: TCircle;
    ActionList1: TActionList;
    act_photo_camera: TTakePhotoFromCameraAction;
    act_photo_library: TTakePhotoFromLibraryAction;
    procedure FormActivate(Sender: TObject);
    procedure img_fotosClick(Sender: TObject);
  private
    { Private declarations }
    {$IFDEF ANDROID}
    PermissaoCamera, PermissaoReadStorage, PermissaoWriteStorage : string;
    procedure TakePhotoPermissionRequestResult(
                                 Sender:TObject;
                                 const Apermissions:TArray<string>;
                                 const AGrantResults:TArray<TpermissionStatus>
                                 );
    procedure DisplayMessageCamera(
                              Sender:TObject;
                              const Apermissions:TArray<string>;
                              const APostProc:TProc);
    {$ENDIF}

  public
    { Public declarations }
  end;

var
  Form1: TForm1;

implementation

{$R *.fmx}

uses
FMX.DialogService
{$IFDEF ANDROID}
     ,Androidapi.Helpers, Androidapi.Jni.JavaTypes, Androidapi.Jni.Os
{$ENDIF}
;
{$IFDEF ANDROID}
procedure TForm1.TakePhotoPermissionRequestResult(
                                 Sender:TObject;
                                 const Apermissions:TArray<string>;
                                 const AGrantResults:TArray<TpermissionStatus>);

begin
  // 3 permissões: CÂMERA, READ_EXTERNAL_STORAGE, WRITE_EXTERNAL_STORAGE
  if(Length(AGrantResults) = 3) and
    (AGrantResults[0]=TPermissionStatus.Granted) and
    (AGrantResults[1]=TPermissionStatus.Granted) and
    (AGrantResults[2]=TPermissionStatus.Granted) then
      act_photo_camera.Execute
  else
    TDialogService.ShowMessage('Você não tem permissão para tirar foto');
end;

procedure TForm1.DisplayMessageCamera(
                              Sender:TObject;
                              const Apermissions:TArray<string>;
                              const APostProc:TProc);
begin
    TDialogService.ShowMessage('O app precisa de acesso a sua câmera e a galeria de fotos',
      procedure(const Aresult: TModalResult)
      begin
        APostProc;
      end
    );
end;
{$ENDIF}
procedure TForm1.FormActivate(Sender: TObject);
begin
  {$IFDEF ANDROID}
  PermissaoCamera:= JStringToString(TJManifest_permission.JavaClass.CAMERA);
  {A declaração acima faz o mesmo que essa: PermissaoCamera:= 'android.permission.CAMERA'}
  PermissaoReadStorage := JStringToString(TJManifest_permission.JavaClass.READ_EXTERNAL_STORAGE);
  PermissaoWriteStorage := JStringToString(TJManifest_permission.JavaClass.WRITE_EXTERNAL_STORAGE);
  {$ENDIF}
  end;

procedure TForm1.img_fotosClick(Sender: TObject);
begin
{$IFDEF ANDROID}
    PermissionsService.RequestPermissions([PermissaoCamera,
                                           PermissaoReadStorage,
                                           PermissaoWriteStorage],
                                           TakePhotoPermissionRequestResult,
                                           DisplayMessageCamera
                                           );
{$ENDIF}

{$IFDEF IOS}
  act_photo_camera.Execute
{$ENDIF}
end;

end.
